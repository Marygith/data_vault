version: '3.8'

x-airflow-common:
  &airflow-common
  image: apache/airflow:2.2.3
  environment:
    AIRFLOW__CORE__EXECUTOR: LocalExecutor
    AIRFLOW__CORE__LOAD_EXAMPLES: False
    AIRFLOW__CORE__EXPOSE_CONFIG: True
    AIRFLOW__WEBSERVER__EXPOSE_CONFIG: True
    AIRFLOW__API__AUTH_BACKEND: 'airflow.api.auth.backend.default'
    AIRFLOW__CORE__SQL_ALCHEMY_CONN: postgresql+psycopg2://postgres:postgres@postgres:5432/postgres
  volumes:
    - ./dags:/opt/airflow/dags
    - ./airflow_data/logs:/opt/airflow/logs
    - ./airflow_data/plugins:/opt/airflow/plugins
  depends_on:
    - postgres


services:
  postgres:
    image: postgres
    environment:
      POSTGRES_DB: postgres
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    restart: always
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./init-postgres:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    networks:
      - airflow

  vertica:
    platform: linux/x86_64
    environment:
      APP_DB_USER: "vertica"
      APP_DB_PASSWORD: "vertica"
    container_name: vertica-ce
    image: vertica/vertica-ce
    ports:
      - "5433:5433"
    volumes:
      - vertica_data:/data
    networks:
      - airflow

  airflow-init:
    <<: *airflow-common
    container_name: airflow_init
    entrypoint: /bin/bash
    command: >
      -c "
      pip install vertica-python &&
      airflow db init && 
      airflow users create --role Admin --username airflow --password airflow --email airflow@airflow.com --firstname airflow --lastname airflow &&
      airflow variables set POSTGRESQL_URI 'postgresql+psycopg2://postgres:postgres@postgres:5432/postgres' &&
      airflow variables set API_NGROK_URL 'https://4c6e-2a03-d000-183-430e-7954-5a26-1413-5ef7.ngrok-free.app'
      "
    restart: on-failure
    networks:
      - airflow
    depends_on:
      - postgres

  airflow-webserver:
    <<: *airflow-common
    command: >
      bash -c "
      pip install vertica-python &&
      airflow webserver
      "
    ports:
      - "8080:8080"
    container_name: airflow_webserver
    restart: always
    networks:
      - airflow
    depends_on:
      - airflow-init

  airflow-scheduler:
    <<: *airflow-common
    command: >
      bash -c "
      pip install vertica-python &&
      airflow scheduler
      "
    container_name: airflow_scheduler
    restart: always
    networks:
      - airflow
    depends_on:
      - airflow-init

volumes:
  pgdata:
  vertica_data:

networks:
  airflow:
    driver: bridge
